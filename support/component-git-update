#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative '../lib/gdk'

PROGNAME = File.basename(__FILE__)

def main(component, worktree, revision, fetch = true)
  config = GDK::Config.new.dig(component) # rubocop:disable Style/SingleArgumentDig
  abort "unknown component: #{component.inspect}" unless config

  unless config.auto_update
    warn "#{PROGNAME}: auto update for #{component} is disabled via gdk.yml"
    exit
  end

  Dir.chdir(worktree)
  fetch = !fetch.to_s.casecmp('false').zero?
  revision = parse_revision(revision)

  commands = [[%w[git stash], false]]
  commands << [%w[git fetch --all --tags --prune], true] if fetch
  commands << [%W[git checkout #{revision}], true]
  commands << [%w[git pull --ff-only], true] if %w[master main].include?(revision)

  commands.each do |cmd, print_stdout|
    warn "DEBUG: cmd=[#{cmd}]" if debug?

    out = print_stdout ? $stdout : :close
    next if system(*cmd, out: out)

    abort "command failed: #{cmd.join(' ')}"
  end
end

def debug?
  ENV.fetch('GDK_DEBUG', 'false') == 'true'
end

def parse_revision(revision)
  return revision unless revision == 'HEAD'

  sh = Shellout.new(%w[git ls-remote --symref --quiet])
  output = sh.readlines(1).first

  abort "failed to get default branch" if !sh.success? || !output

  rev = output.match(%r{refs/heads/(\S+)})&.captures&.first

  abort "failed to read default branch from '#{output}'" unless rev

  rev
end

abort "usage: #{PROGNAME} COMPONENT WORKTREE REVISION [FETCH]" if ARGV.count < 3

main(*ARGV)
